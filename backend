import os
# We'll render HTML templates and access data sent by POST
# using the request object from flask. Redirect and url_for
# will be used to redirect the user once the upload is done
# and send_from_directory will help us to send/show on the
# browser the file that the user just uploaded
from flask import Flask, render_template, request, redirect, url_for, send_from_directory
from werkzeug import secure_filename
from pymongo import MongoClient
import subprocess
import sys
import json
import time
import datetime
from flask import jsonify
from apns import APNs, Frame, Payload

# Initialize the Flask application
app = Flask(__name__)
APP_ROOT = os.path.dirname(os.path.abspath(__file__))
# This is the path to the upload directory
target= os.path.join(APP_ROOT, 'uploads/')
app.config['UPLOAD_FOLDER'] = target
app.config['MAX_CONTENT_LENGTH'] = 10*1024*1024
# These are the extension that we are accepting to be uploaded
app.config['ALLOWED_EXTENSIONS'] = set(['png', 'jpg', 'jpeg', 'gif','JPG','PNG'])


# For a given file, return whether it's an allowed type or not
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1] in app.config['ALLOWED_EXTENSIONS']

# This route will show a form to perform an AJAX request
# jQuery is loaded to execute the request and update the
# value of the operation
@app.route('/')
def index():
    return render_template('index.html')

# Route that will process the file upload
@app.route('/upload', methods=['POST', 'GET'])
def upload():
    
    # Get the name of the uploaded file
    if 'file' not in request.files:
        return jsonify(msg='No file attached.',status_code='0')

    file = request.files['file']
    if request.form:
        name=request.form['text']
    else:
        if 'name' in request.args:
            name=request.args.get('name')
        else:
            return jsonify(msg='No User Name.',status_code='0')
    # Check if the file is one of the allowed types/extensions
    if file and allowed_file(file.filename):
        # Make the filename safe, remove unsupported chars
        con = MongoClient()
        db=con.test_database
        image = db.image

        i=0
        peeps = image.find()
        for j in peeps:
            i = i + 1

        idno= i + 1
        filename = secure_filename(file.filename)
        #filename =name+str(idno)
        # Move the file form the temporal folder to
        # the upload folder we setup
        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
        
        # Redirect the user to the uploaded_file route, which
        # will basicaly show on the browser the uploaded file
        return redirect(url_for('uploaded_file',
                                filename=filename,name=name,idno=idno))
    else:
        return redirect(url_for('error_page'))

# This route is expecting a parameter containing the name
# of a file. Then it will locate that file on the upload
# directory and show it on the browser, so if the user uploads
# an image, that image is going to be show after the upload
@app.route('/uploaded_file/<filename>/<name>/<idno>')
def uploaded_file(filename,name,idno):
   
#    subprocess.call(["C:\\temp\\calc.exe"])

    #read file absolute path
    filepath= os.path.abspath("uploads/"+filename)
   # filepath = 'C:\image\me9.PNG'
    print("filepath==", filepath)
#    index=os.system("/Users/nikitasonthalia/CeepCam/FileUpload/src/enroll.py "+filepath)
    enrollfilepath=os.path.abspath('Enroll.exe')
    print("Enrollfilepath==", enrollfilepath)
    Textfilepath=os.path.abspath('Textfile.txt')
    index = None
    try:
        index=subprocess.check_output([enrollfilepath ,filepath,Textfilepath])
    except subprocess.CalledProcessError as e:
        index = e.output
    print(index)
   # if (isinstance(index,int)):
   #     print(index)
   # else:
   #     print("error : "+ index)
    #Textfilepath=os.path.abspath('Textfile.txt')
    #index=subprocess.check_output([sys.executable,enrollfilepath , filepath,Textfilepath])
    con = MongoClient()
    db=con.test_database
    image = db.image
    peeps = image.find()
    image.insert({'id_no': idno, 'name':name,'indexno': index,'imagename': filename,'timestamp': datetime.datetime.now()})
    peeps = image.find()
    for image in peeps:
       print(image)
    con.close()
    return jsonify(id_no=idno,status_code='1')

    #return render_template('Switch.html')
    
#    return send_from_directory(app.config['UPLOAD_FOLDER'],filename)


# Handle Get request for switch on.
@app.route('/video', methods=['GET'])
def video():
    con = MongoClient()
    db = con.test_database
    image = db.image
    #peeps = image.find()
    #for image in peeps:
    #    print(image)
    if request.form:
        id=request.form['video']
    else:
        id = request.args.get('id')
        token_id = request.args.get('token')
    print(id)
    #get the user detail from database
    user = image.find_one({"id_no": str(id)})
   # user = None
    #check if data with particular user is there
    print(user)
    if user:

        #index=os.system("/Users/nikitasonthalia/CeepCam/FileUpload/src/enroll.py "+filepath)
        camparefilepath = os.path.abspath('Test4.exe')
        print(camparefilepath)
        Textflefilepath = os.path.abspath('Textfile.txt')
        print(Textflefilepath)
        vediofilepath = "http://iphone-streaming.ustream.tv/uhls/22826639/streams/live/iphone/playlist.m3u8"
        print(vediofilepath)
        print(str(user['indexno']))
       # print Textflefilepath
      #  status=subprocess.check_output([sys.executable,camparefilepath, str(user['indexno']),Textflefilepath,vediofilepath])
        status = subprocess.check_output( [camparefilepath,str(user['indexno']), Textflefilepath, vediofilepath])
        #status =str("Match")
        name =str(user['name'])
        print('status==='+ str(status))
        #check if compare.exe has reture true of false
       # print(status)
        status = status.decode("utf-8")
        print(status)
        result = str('Match')
        print(result)
 #       img = open("img.jpg","wb")
        #codecs.decode(b"whatever", "base64_codec")
 #       img.write(status.decode('base64'))
        if result in status:
            apns = APNs(use_sandbox=True, cert_file='Certificates-APN-Prod.pem', key_file='')
            # Send a notification
            print("token id "+token_id)
            token_hex = token_id
            alert_s = name + " is here."
            payload = Payload(alert= alert_s, sound="default", badge=1)
            apns.gateway_server.send_notification(token_hex, payload)

            # Send an iOS 10 compatible notification
           # token_hex = 'b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b87'
            #payload = Payload(alert="Hello World!", sound="default", badge=1, mutable_content=True)
           # apns.gateway_server.send_notification(token_hex, payload)

            # Send multiple notifications in a single transmission
           # frame = Frame()
           # identifier = 1
           # expiry = time.time() + 3600
           # priority = 10
            #frame.add_item('b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b87', payload, identifier, expiry,
            #               priority)
           # apns.gateway_server.send_notification_multiple(frame)
            return jsonify(message=alert_s)
        else:
            return jsonify(message='none')
    else:
        return redirect(url_for('error_page'))


@app.route('/error_page')
def error_page():

    return 'File not allow!'

if __name__ == '__main__':
    app.run(
        host="0.0.0.0",
        port=int("80"),
        debug=True
    )
